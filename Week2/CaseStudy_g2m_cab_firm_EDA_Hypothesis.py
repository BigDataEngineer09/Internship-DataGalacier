# -*- coding: utf-8 -*-
"""G2M_Cab_Firm_CaseStudy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lWoxN56ek6LUUtIJ5Kc3DqOuRCgAWAmn
"""

import pandas as pd
import numpy as np
import warnings
import matplotlib.pyplot as plt
import seaborn as sns
import string
from scipy.stats import f_oneway
from scipy.stats import ttest_ind
from scipy.stats import chi2_contingency
from scipy.stats import pearsonr
import statsmodels.api as sm
warnings.simplefilter(action='ignore', category=FutureWarning)
warnings.simplefilter(action='ignore', category=UserWarning)

from google.colab import drive
drive.mount('/content/drive')

#!ls '/content/drive/My Drive/'

df_cab= pd.read_csv('/content/drive/My Drive/Dataset/G2M Cab_DataSets/Cab_Data.csv')
df_city= pd.read_csv('/content/drive/My Drive/Dataset/G2M Cab_DataSets/City.csv')
df_customer= pd.read_csv('/content/drive/My Drive/Dataset/G2M Cab_DataSets/Customer_ID.csv')
df_transaction= pd.read_csv('/content/drive/My Drive/Dataset/G2M Cab_DataSets/Transaction_ID.csv')
df_holidays=pd.read_csv('/content/drive/My Drive/Dataset/G2M Cab_DataSets/US_Holiday_Dates.csv')

"""# **Undrestanding the data**

**Cab Data:** this file includes details of transaction for 2 cab companies 'Pink Cab' and 'Yellow Cab'

``Transaction ID:`` A unique identifier assigned to each transaction
``Date of Travel:`` The date on which the cab service was availed by the customer

``Company:`` Indicates the cab company associated with the transaction

``City:`` Specifies the city in which the cab service was utilized

``KM Travelled:`` Represents the distance covered during the cab ride

``Price Charged:`` Denotes the amount charged to the customer for availing the cab service

``Cost of Trip:`` Indicates the operational cost incurred by the cab companies for facilitating the trip
"""

df_cab.info()

print(df_cab.shape)
df_cab.sample(3)

"""# City Data

``City:`` Refers to the name of the city where the cab service is provided.

``Population:`` Indicates the total population of the city where the cab service operates.

``Users:`` Represents the number of users or customers availing cab services in the respective city.
"""

df_city.info()

print(df_city.shape)
df_city.sample(3)

"""# Customer Data

``Customer ID:`` This is a unique identifier assigned to each customer using the cab service.

``Gender:`` Indicates the gender of the customer availing the cab service.

``Age:`` Represents the age of the customer availing the cab service.

``Income (USD/Month):`` Indicates the monthly income of the customer in USD.
"""

print(df_customer.shape)
df_customer.info()

df_customer.sample(3)

"""# Transaction data

``Transaction ID:`` This is a unique identifier assigned to each transaction.

``Customer ID:`` This is a unique identifier assigned to each customer using the cab service. It helps in associating transactions with specific customers and understanding their usage patterns.

``Payment_Mode:`` Indicates the mode of payment used for the transaction, such as cash or credit/debit card.
"""

df_transaction.info()

print(df_transaction.shape)
df_transaction.sample(3)

df_transaction.describe().T

"""# Holiday Data

The holiday data file contains information about holidays observed, including the date, holiday name, day of the week, month, and year.

``Date:`` This field represents the date of the holiday

``Holiday:`` This field contains the name or description of the holiday being observed.

``WeekDay:`` This field indicates the day of the week on which the holiday falls.

``Month:`` This field represents the month in which the holiday occurred

``Day:`` This field represents the day of the month on which the holiday occurred.

``Year:`` This field represents the year in which the holiday occurred.
"""

df_holidays.dtypes

df_holidays.head(3)

"""**Filtering Holiday data**

We need to filter holiday between 01/2016 to 12/2018 as the main dataset Cab data period ranges from 01/2016 to 12/2018 as the main dataset Cab data period ranges from
"""

df_holidays['Date'] = pd.to_datetime(df_holidays['Date'])
holidays_filtered_df = df_holidays[(df_holidays['Date'] >= '2016-01-01') & (df_holidays['Date'] <= '2018-12-31')]
holidays_filtered_df.sample(3)

"""**Null Values**"""

print(f" Null values in Cab data: {df_cab.isnull().sum().sum()}")
print(f" \n Null values in City data: {df_city.isnull().sum().sum()}")
print(f" \n Null values in Customer data: {df_customer.isnull().sum().sum()}")
print(f" \n Null values in Transaction data: {df_transaction.isnull().sum().sum()}")

"""**Missing Values**"""

df_cab.describe(include='all')

print(f" Missing values in Cab data: {df_cab.isna().any().any()}")
print(f" \n Missing values in City data: {df_city.isna().any().any()}")
print(f" \n Missing values in Customer data: {df_customer.isna().any().any()}")
print(f" \n Missing values in Transaction data: {df_transaction.isna().any().any()}")

"""**Duplicate records**"""

print(f" Duplicate records in Cab data: {df_cab.duplicated().sum()}")
print(f" \n Duplicate recordss in City data: {df_city.duplicated().sum()}")
print(f" \n Duplicate records in Customer data: {df_customer.duplicated().sum()}")
print(f" \n Duplicate records in Transaction data: {df_transaction.duplicated().sum()}")

"""# **Data Preprocessing**


1.   Rename columns in datframe
2.   Feature Engineering : Creating  new features
3.   Remove punctuations in record values

**Rename columns in all dataframes**
"""

dataframes=[df_cab,df_customer,df_transaction]
for df in dataframes:
  for col in df.columns:
    if ' ' in col:
      df.rename(columns={col: col.replace(' ', '_')}, inplace=True)

"""**Data Transformation**

**``Note``** that the **``Date_of_Travel``** column contains date  in Excel numberical format. We know that the given dataset period ranges from 31/01/2016 to 31/12/2018. Hence we conver the serial number into date format and store it in a new colum called **``Trave_Date``**
"""

df_cab.tail()

# Serial number to date format
import xlrd
def serial_to_date(serial_number):
  datetime_date = xlrd.xldate_as_datetime(serial_number, 0)
  return datetime_date.date()

df_cab["Travel_Date"] = df_cab["Date_of_Travel"].apply(serial_to_date)
df_cab["Travel_Date"] = df_cab["Travel_Date"].astype('datetime64[ms]')

"""**Feature Engineering**

Extract year, month, day using datetime methods
"""

df_cab['Year'] = df_cab['Travel_Date'].dt.year
df_cab['Month'] = df_cab['Travel_Date'].dt.month
df_cab['Day'] = df_cab['Travel_Date'].dt.day
df_cab['Day_of_week'] = df_cab['Travel_Date'].dt.dayofweek
df_cab['Day_of_week_name'] = df_cab['Travel_Date'].dt.day_name()
df_cab['Weekend'] = df_cab['Day_of_week'].isin([5, 6]).astype(int)

df_cab.head()

"""Change the column name in easy format like **Income_(USD/Month)** to **"Income"**"""

df_customer.rename(columns={"Income_(USD/Month)": "Income"}, inplace=True)
df_customer.sample(3)

"""**Remove punctuations in records**"""

df_city.head(2)

def preprocess_text(text):
    # Remove punctuation:
    no_punctuation = ''.join([char for char in text if char not in string.punctuation])

    # Convert to integer
    try:
        result = int(no_punctuation)
    except ValueError:
        # Handle cases where the text cannot be converted to an integer
        result = None

    return result

df_city['Population']=df_city['Population'].apply(preprocess_text)
df_city['Users']=df_city['Users'].apply(preprocess_text)

"""# **Exploratory Data Analysis**

# Merge the data

Create a master data by merging Cab data, Transaytion data , Customer data and City data

# **Relationships across Files**
**Cab_Data.csv** links to Transaction_ID.csv via a transaction ID.

**Transaction_ID.csv** links to Customer_ID.csv via a customer ID.

**Customer_ID.csv** links to City.csv via a City field
"""

df_transaction.shape
print(f" Count of duplicate Transaction ID records in Cab data: {df_cab.duplicated().sum()}")

# Transaction_ID is the unique identifier
merged_df = pd.merge(left=df_cab, right=df_transaction, on='Transaction_ID', how='inner')

#merge with Customer_ID based on Customer_ID in transaction_id
merged_df = pd.merge(left=merged_df, right=df_customer, on='Customer_ID', how='inner')

# merge with City based on City in Cab_Data
merged_df = pd.merge(left=merged_df, right=df_city, left_on='City', right_on='City', how='inner')

# merge with Holiday data on Month and Day
merged_df = pd.merge(left=merged_df, right= holidays_filtered_df[['Month', 'Day', 'Holiday']],
                    how='left', on=['Month', 'Day'])
merged_df.head(3)

"""**``Note:-``** There are null values in **``Holiday``** Column that didnt have a match. So lets create a new column as **``Holiday_Indicator``** to identifiy whether the given day is a holiday or not."""

merged_df['Holiday_Indicator'] = merged_df['Holiday'].notnull().astype(int)
merged_df.head(3)

merged_df['Profit'] = merged_df['Price_Charged']-merged_df['Cost_of_Trip']
merged_df['Profit_Percentage'] = (merged_df['Profit'] / merged_df['Price_Charged']) * 100
merged_df=merged_df.round(2)
merged_df.head()

merged_df.info()

data=merged_df.copy()

"""**Drop the not required columns**

Example: **``Date_of_Travel``** is in series format and we have new column **``Travel_Date``** with date format. So we can drop the Date_of_Travel column
"""

data = data.drop(['Date_of_Travel'], axis=1)

print(f" Null values in Merged data: {data.isnull().sum().sum()}")

"""**``Note:-``** As we have seen earlier Null values are because of Holiday data. So lets handle Null Values."""

data['Holiday'].fillna(0, inplace=True)
print(f" Null values in Merged data: {data.isnull().sum().sum()}")

"""**Handle Duplicate data after merging the data**"""

print(f" Duplicate records in Merged data: {data.duplicated().sum()}")

#Fetch all duplicate values
duplicate=data[data.duplicated(keep='last')]
duplicate.head()

#Remove Duplicate Records
data.drop_duplicates(inplace=True)
data.duplicated().sum()
print(f" Duplicate records in Merged data: {data.duplicated().sum()}")

print(f" Missing values in Merged data: {data.isna().any().any()}")

"""# **Numerical Features**"""

numerical_variables = [feature for feature in data.columns if merged_df[feature].dtypes!='O']
print('Number of numberical variables:', len(numerical_variables))

data[numerical_variables].sample(1)

"""# **Categorial Features**"""

categorial_variables = [feature for feature in data.columns if merged_df[feature].dtypes=='O']
print('Number of categorial variables:', len(categorial_variables))

data[categorial_variables].sample(1)

"""# **Univariate Analysis**

**1. Numerical  variables**
"""

for col in numerical_variables:
  if col!='Travel_Date':
    print(col)
    print('Skew :', round(data[col].skew(), 2))
    plt.figure(figsize = (10, 4))
    plt.subplot(1, 2, 1)
    data[col].hist(grid=True,color='purple')
    plt.ylabel('count')
    plt.title('Histogram of ' + col)
    plt.subplot(1, 2, 2)
    sns.boxplot(x=data[col],color='deeppink')
    plt.title('Boxplot of ' + col)
    plt.show()

"""**Cost of the trip**

 From Univariate analysis, there are outliers in Price_Charged.

 Below Box plot indicates that`Pink Cab` and  `Yellow Cab` have many outliers in Prices charged whereas there are no outliers in Cost of the Trip. This implies that both the company has profited or charged more based on model of the car, city, or season. So we cannot remove these values from the dataset.
"""

fig, axes = plt.subplots(1, 2, figsize=(17, 8))
palletes=['hotpink','gold']
fig.suptitle('Boxplot of Cost of the Trip Vs Prices Charged by both companies', fontsize=15)
sns.boxplot(data=data, x="Cost_of_Trip", hue="Company",palette=palletes,ax=axes[0],linecolor="#137", linewidth=.75,flierprops={"marker": "x"})
axes[0].set_title('Boxplot of Cost of the Trip Pink Cab Vs Yellow Cab')
sns.boxplot(data=data, x="Price_Charged", hue="Company",palette=palletes,ax=axes[1],linecolor="#137", linewidth=.75,flierprops={"marker": "x"})
axes[1].set_title('Boxplot of Prices charged by Pink Cab Vs Yellow Cab')
plt.tight_layout()
plt.show()

"""**2. Categorial  variables**"""

print(categorial_variables)

fig, axes = plt.subplots(3, 2, figsize = (18, 18),gridspec_kw={'hspace': 0.9})
fig.suptitle('Bar plot for all categorical variables in the dataset')
p_color=['gold','hotpink']
g_color=['dodgerblue','deeppink']
pay_color=['greenyellow','yellowgreen']
sns.countplot(ax = axes[0, 0], x = 'Company', data = data, palette = 'YlGnBu_r',
              order = data['Company'].value_counts().index);
sns.countplot(ax = axes[0, 1], x = 'City', data = data,  palette='YlGnBu_r',
              order = data['City'].value_counts().index);
sns.countplot(ax = axes[1, 0], x = 'Day_of_week_name', data = data, palette = 'YlGnBu_r',
              order = data['Day_of_week_name'].value_counts().index);
sns.countplot(ax = axes[1, 1], x = 'Payment_Mode', data = data, palette = 'YlGnBu_r',
              order = data['Payment_Mode'].value_counts().index);
sns.countplot(ax = axes[2, 0], x = 'Gender', data = data, palette = 'YlGnBu_r',
              order = data['Gender'].value_counts().index);
sns.countplot(ax = axes[2, 1], x = 'Holiday', data = data, palette = 'YlGnBu_r',
              order = data['Holiday'].value_counts().index);
for ax in axes.flatten():
    ax.tick_params(labelrotation=45)
plt.show()

"""# **Correlation Analysis**"""

numerical_features = data.select_dtypes(include=['float64', 'int64'])
correlation_matrix = numerical_features.corr()
#print("Correlation Matrix:")
#print(correlation_matrix)
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

PinkCab_df = data[data['Company']=='Pink Cab']
YellowCab_df = data[data['Company']=='Yellow Cab']
PinkCab_df.head(2)

fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 7))

sns.scatterplot(data=PinkCab_df, x='KM_Travelled', y='Price_Charged',color='hotpink', ax=ax1)
ax1.set_title('Price vs Distance in Pink Cab', fontsize=20)
ax1.set_xticklabels(ax1.get_xticklabels(), rotation=0, fontsize=15)

sns.scatterplot(data=YellowCab_df, x='KM_Travelled', y='Price_Charged',color='gold', ax=ax2)
ax2.set_title('Price vs Distance in Yellow Cab', fontsize=20)
ax2.set_xticklabels(ax2.get_xticklabels(), rotation=0, fontsize=15)

plt.show()

# Distribution and KDE plot for distribution of 'KM Travelled' for Pink Cab
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15, 10))

# Distribution plot for Pink Cab
sns.histplot(PinkCab_df['KM_Travelled'], kde=False, color='hotpink', bins=70, ax=axes[0, 0])
axes[0, 0].set_title("Distribution of KM Travelled (Pink Cab)", fontsize=20, y=1.012)
axes[0, 0].set_xlabel("KM Travelled", labelpad=15)
axes[0, 0].set_ylabel("frequency", labelpad=15)

# KDE plot for Pink Cab
sns.kdeplot(PinkCab_df['KM_Travelled'], shade=True, color='hotpink', ax=axes[0, 1])
axes[0, 1].set_xlabel('KM Travelled', labelpad=15)
axes[0, 1].set_ylabel('Density', labelpad=15)
axes[0, 1].set_title('Kernel Density Estimation (KDE) of KM Travelled for Pink Cab', fontsize=15)

# Distribution and KDE plot for distribution of 'KM Travelled' for Yellow Cab
sns.histplot(YellowCab_df['KM_Travelled'], kde=False, color='gold', bins=70, ax=axes[1, 0])
axes[1, 0].set_title("Distribution of KM Travelled (Yellow Cab)", fontsize=20, y=1.012)
axes[1, 0].set_xlabel("KM Travelled", labelpad=15)
axes[1, 0].set_ylabel("frequency", labelpad=15)

# KDE plot for Yellow Cab
sns.kdeplot(YellowCab_df['KM_Travelled'], shade=True, color='gold', ax=axes[1, 1])
axes[1, 1].set_xlabel('KM Travelled', labelpad=15)
axes[1, 1].set_ylabel('Density', labelpad=15)
axes[1, 1].set_title('Kernel Density Estimation (KDE) of KM Travelled for Yellow Cab', fontsize=15)

plt.tight_layout()
plt.show()

fig, axes = plt.subplots(1, 3, figsize=(25, 7), sharey=True, gridspec_kw={'width_ratios': [1, 4, 1]})

# Distribution plot for Pink Cab
sns.histplot(PinkCab_df['Price_Charged'], kde=True, color='hotpink', label='Pink Cab', ax=axes[0],alpha=0.7)
axes[0].lines[0].set_color('crimson')
axes[0].set_xlabel('Price Charged')
axes[0].set_ylabel('Frequency')
axes[0].grid(axis='y')
axes[0].set_title('Distribution of Prices Charged by Pink Cab')

# Common center plot
sns.histplot(PinkCab_df['Price_Charged'], kde=True, color='hotpink', label='Pink Cab', ax=axes[1], alpha=0.7)
sns.histplot(YellowCab_df['Price_Charged'], kde=True, color='gold', label='Yellow Cab', ax=axes[1], alpha=0.7)
axes[1].set_xlabel('Price Charged')
axes[1].set_ylabel('Frequency')
axes[1].set_title('Distribution of Prices Charged by Pink Cab and Yellow Cab')
axes[1].grid(axis='y')
axes[1].legend()

# Distribution plot for Yellow Cab
sns.histplot(YellowCab_df['Price_Charged'], kde=True, color='yellow', label='Yellow Cab', ax=axes[2])#
axes[2].lines[0].set_color('orange')
axes[2].set_xlabel('Price Charged')
axes[2].set_ylabel('Frequency')
axes[2].set_title('Distribution of Prices Charged by Yellow Cab')
plt.grid(axis='y')
plt.axis('equal')
plt.tight_layout()
plt.show()

fig, axes = plt.subplots(1, 2, figsize=(17, 8))
palletes=['hotpink','gold']
fig.suptitle('Boxplot of Cost of the Trip Vs Prices Charged by both companies', fontsize=15)
sns.boxplot(data=df_cab, x="Cost_of_Trip", hue="Company",palette=palletes,ax=axes[0],linecolor="#137", linewidth=.75,flierprops={"marker": "x"})
axes[0].set_title('Boxplot of Cost of the Trip Pink Cab Vs Yellow Cab')
sns.boxplot(data=df_cab, x="Price_Charged", hue="Company",palette=palletes,ax=axes[1],linecolor="#137", linewidth=.75,flierprops={"marker": "x"})
axes[1].set_title('Boxplot of Prices charged by Pink Cab Vs Yellow Cab')
plt.tight_layout()
plt.show()

Pink_Cab_sales_by_year_month = PinkCab_df.groupby(['Year', 'Month'])['Price_Charged'].sum().reset_index()
Yellow_Cab_sales_by_year_month = YellowCab_df.groupby(['Year', 'Month'])['Price_Charged'].sum().reset_index()
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
fig.suptitle('Pink Cab Vs Yellow Cab Fare Analysis')

pink_palettes = ['mediumorchid', 'pink', 'hotpink']
yellow_palettes = ['gold', 'orange', 'red']

# Pink Cab Line Plot
sns.lineplot(data=Pink_Cab_sales_by_year_month, x='Month', y='Price_Charged', hue='Year', marker='o', markeredgecolor='black', palette=pink_palettes, ax=axes[0])
axes[0].set_xlabel('Month')
axes[0].set_ylabel('Price')
axes[0].set_title('Pink Cab Vs Yellow - Monthly Fare Analysis')
axes[0].ticklabel_format(axis='y', style='plain', useOffset=False)
axes[0].legend(title='Year')

# Yellow Cab Line Plot
sns.lineplot(data=Yellow_Cab_sales_by_year_month, x='Month', y='Price_Charged', hue='Year', marker='o', markeredgecolor='black', palette=yellow_palettes, ax=axes[0])
axes[0].legend(title='Year')

# Stacked Bar Plot
years = sorted(Pink_Cab_sales_by_year_month['Year'].unique())

# Extracting Pink Cab and Yellow Cab sales for each year
pink_sales = []
yellow_sales = []
for year in years:
    pink_sales.append(Pink_Cab_sales_by_year_month[Pink_Cab_sales_by_year_month['Year'] == year]['Price_Charged'].sum())
    yellow_sales.append(Yellow_Cab_sales_by_year_month[Yellow_Cab_sales_by_year_month['Year'] == year]['Price_Charged'].sum())

index = np.arange(len(years))
bar_width = 0.35

pink_bar = axes[1].bar(index, pink_sales, bar_width, label='Pink Cab', color='hotpink')
yellow_bar = axes[1].bar(index, yellow_sales, bar_width, label='Yellow Cab', color='gold', bottom=pink_sales)

axes[1].set_xlabel('Year')
axes[1].set_ylabel('Sales')
axes[1].set_title('Pink Cab Vs Yellow Cab - Yearly Fare Analysis')
axes[1].set_xticks(index)
axes[1].set_xticklabels(years)
axes[1].ticklabel_format(axis='y', style='plain', useOffset=False)
axes[1].legend()
plt.tight_layout()
plt.show()

"""# **Weekend Fare Analysis**
 The data analysis shows the significance of weekends as a prime revenue-generating period for both Pink Cab and Yellow Cab, highlighting the importance of strategic planning and operational excellence to optimize revenue performance during leisure periods

* **Weekend Revenue Comparison**
  Both Pink Cab and Yellow Cab demonstrate a significant increase in revenue during weekends compared to weekdays.

  **Pink Cab** the average revenue surges from approximately 303.18 during weekdays to about 321.25 during weekends, representing a percentage difference of approximately **5.96%**.

   **Yellow Cab** experiences a notable increase in average revenue during weekends, rising from approximately 447.84 during weekdays to about 472.26 during weekends. This corresponds to a percentage difference of approximately **5.45%**.


"""

Pink_Cab_weekend = PinkCab_df.groupby('Weekend')['Price_Charged'].sum().reset_index()
Yellow_Cab_weekend = YellowCab_df.groupby('Weekend')['Price_Charged'].sum().reset_index()
#  Yellow Cab data
plt.bar(Yellow_Cab_weekend['Weekend'], Yellow_Cab_weekend['Price_Charged'], color='gold', label='Yellow Cab', alpha=0.7)
#  Pink Cab data
plt.bar(Pink_Cab_weekend['Weekend'], Pink_Cab_weekend['Price_Charged'], color='hotpink', label='Pink Cab')
plt.xlabel('Weekend')
plt.ylabel('Total Price Charged')
plt.title('Total Price Charged by Pink Cab and Yellow Cab During Weekends and Weekdays')
plt.xticks([0, 1], ['Weekday', 'Weekend'])
plt.ticklabel_format(axis='y', style='plain', useOffset=False)
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

#get weekend data by company
weekend_df = data.groupby(['Company', 'Weekend'])['Price_Charged'].mean().sort_values(ascending=False).reset_index()

#bar plot for comparison on weekdays and weekends
catplot = sns.catplot(x='Company', y='Price_Charged', hue='Weekend', data=weekend_df, kind='bar', height=6, aspect=2, palette='YlGnBu')

plt.ylabel('Average Price Charged')
plt.title('Average Price Charged by Pink Cab and Yellow Cab on Weekdays and Weekends')
plt.grid(axis='y')
plt.show()

price_comparison = data.groupby(['Company', 'Weekend'])['Price_Charged'].mean().reset_index()

comparison_table = price_comparison.pivot_table(index='Company', columns='Weekend', values='Price_Charged').reset_index()

comparison_table['Percentage_Difference'] = ((comparison_table[1] - comparison_table[0]) / comparison_table[0]) * 100
print(comparison_table)

"""# **Holiday Analysis**

It's important to note the divergence between the **distance traveled** and the **revenue generated**by **Pink Cab** during holiday periods compared to non-holiday periods.

Despite covering **fewer kilometers** during holidays, Pink Cab experiences a notable **increase in revenue**, while Yellow Cab demonstrates a** marginal decrease in revenue** during the same periods.

This discrepancy suggests that Pink Cab may have implemented strategies to optimize its revenue generation during holidays, such as implementing surge pricing, offering special promotions, or focusing on high-demand routes. These initiatives could have effectively offset the reduction in distance traveled, resulting in a net increase in revenue.

*  **Impact of US Holidays on Revenue**

  **Pink Cab** experiences a notable **increase** in revenue during holiday periods compared to non-holiday periods. Specifically, during holidays, Pink Cab's average revenue rises and this corresponds to a percentage difference of approximately ** 0.98%**, signifying a slight improvement in revenue during holidays.

  **Yellow Cab's** revenue demonstrates a marginal **decrease** during holiday periods in comparison to non-holiday periods.This translates to a percentage difference of approximately -0.19%, indicating a slight decline in revenue for Yellow Cab during holidays.

  These findings suggest that **Pink Cab** experiences a ***positive revenue impact during holiday periods***, while **Yellow Cab** sees a **minor reduction in revenue** during the same periods.
"""

price_comparison_holiday = data.groupby(['Company', 'Holiday_Indicator'])['Price_Charged'].mean().sort_values(ascending=False).reset_index()
# Pivot the table to have Holiday and not a holiday
comparison_table_h = price_comparison_holiday.pivot_table(index='Company', columns='Holiday_Indicator', values='Price_Charged').reset_index()
# Calculate the percentage difference
comparison_table_h['Percentage_Difference'] = ((comparison_table_h[1] - comparison_table_h[0]) / comparison_table_h[0]) * 100
print(comparison_table_h)

catplot = sns.catplot(x='Company', y='Price_Charged', hue='Holiday_Indicator', data=price_comparison_holiday, kind='bar', height=6, aspect=2, palette='Spectral')

"""* **Impact of US Holidays on Distance Traveled**

  For Pink Cab, there is a **slight decrease** in the average **distance traveled** during holiday periods. The average distance decreases from approximately 22.56 kilometers during non-holiday periods to about 22.51 kilometers during holiday periods. This reflects a percentage difference of approximately -0.25%.

  Conversely, **Yellow Cab** shows a slight **increase **in the **average distance** traveled during holiday periods compared to non-holiday periods. The average distance traveled increases from approximately 22.57 kilometers during non-holiday periods to about 22.58 kilometers during holiday periods, resulting in a percentage difference of approximately** 0.04%**.


"""

price_comparison_holiday = data.groupby(['Company', 'Holiday_Indicator'])['KM_Travelled'].mean().sort_values(ascending=False).reset_index()
# Pivot the table to have Holiday and not a holiday
comparison_table_h = price_comparison_holiday.pivot_table(index='Company', columns='Holiday_Indicator', values='KM_Travelled').reset_index()
# Calculate the percentage difference
comparison_table_h['Percentage_Difference'] = ((comparison_table_h[1] - comparison_table_h[0]) / comparison_table_h[0]) * 100
print(comparison_table_h)

price_comparison_holiday = data.groupby(['Company', 'Holiday_Indicator'])['KM_Travelled'].sum().sort_values(ascending=False).reset_index()

price_comparison_holidays=price_comparison_holiday[price_comparison_holiday['Holiday_Indicator']==1]
colors=['gold','hotpink']
sns.barplot(x='Company', y='KM_Travelled', data=price_comparison_holidays, palette=colors)

plt.ylabel('Kilomter Travelled')
plt.title(' Kilometers Travelled by Pink Cab and Yellow Cab on Holidays')
plt.grid(axis='y')
plt.show()

"""* **Top and Low Revenue Months for Pink Cab and Yellow Cab**

  The analysis reveals that **December** stands out as the **top revenue-generating** month for both **Pink Cab and Yellow Cab**. This observation aligns with broader **seasonal trends**, as December typically witnesses heightened consumer activity and increased travel demand associated with holiday festivities.

  Conversely, **February** emerges as the **low revenue** month for **both cab companies**.
  
  This trend may reflect a** post-holiday downturn** in travel demand and consumer spending, characteristic of the early months of the year
"""

month_revenue = data.groupby(['Company', 'Holiday', 'Month','Day'])['Price_Charged'].sum().reset_index()

pink_cab_monthly_revenue = month_revenue[month_revenue['Company'] == 'Pink Cab']
yellow_cab_monthly_revenue = month_revenue[month_revenue['Company'] == 'Yellow Cab']


pink_cab_top_month = pink_cab_monthly_revenue.groupby('Month')['Price_Charged'].sum().idxmax()
yellow_cab_top_month = yellow_cab_monthly_revenue.groupby('Month')['Price_Charged'].sum().idxmax()

pink_cab_low_month = pink_cab_monthly_revenue.groupby('Month')['Price_Charged'].sum().idxmin()
yellow_cab_low_month = yellow_cab_monthly_revenue.groupby('Month')['Price_Charged'].sum().idxmin()

print("Top revenue month for Pink Cab:", pink_cab_top_month)
print("Top revenue month for Yellow Cab:", yellow_cab_top_month)
print("Low revenue month for Pink Cab:", pink_cab_low_month)
print("Low revenue month for Yellow Cab:", yellow_cab_low_month)

#Fetch Decemeber and Feburary Month
Dec_month_df=month_revenue[month_revenue['Month']==12]
Feb_month_df=month_revenue[month_revenue['Month']==2]

plt.figure(figsize=(12, 5))
colors=['hotpink','gold']
plt.subplot(1, 2, 1)
sns.lineplot(data=Dec_month_df, x='Day', y='Price_Charged', hue='Company', marker='o', markeredgecolor='black', palette=colors)
plt.title('December Revenue')
plt.grid(axis='y')
plt.xlabel('Day')
plt.ylabel('Price Charged')

plt.subplot(1, 2, 2)
sns.lineplot(data=Feb_month_df, x='Day', y='Price_Charged', hue='Company', marker='o', markeredgecolor='black', palette=colors)
plt.title('February Revenue')
plt.xlabel('Day')
plt.ylabel('Price Charged')

plt.grid(axis='y')
plt.tight_layout()
plt.show()

"""# **Revenue Analysis in each City**

Upon examining revenue data, it becomes evident that **``Yellow Cab``** has consistently generated higher revenue overall compared to **``Pink Cab``**.

In specific instances, **Pink Cab** achieved its highest revenue in **New York**
during the year **2016**. However, in subsequent years, namely 2017 and 2018, **Silicon Valley** emerged as the leading revenue-generating city for Pink Cab. Notably, there were ***variations*** in the third-ranking city each year, with *``Miami, Austin, and Orange County``* occupying the position in 2016, 2017, and 2018, respectively.

Conversely, **Yellow Cab** maintained its revenue dominance in New York across all three years. Additionally,** Silicon Valley and Dalla**s consistently secured the second and third positions, respectively, in revenue generation for Yellow Cab throughout the same period.

"""

City_Comparison = data.groupby(['Company', 'City','Year','Month'])['Price_Charged'].mean().sort_values(ascending=False).reset_index()

years = sorted(City_Comparison['Year'].unique())
colors = ['#FAFAD2','#FFB6C1']

fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(18, 18))

for i, year in enumerate(years):
    year_data = City_Comparison[City_Comparison['Year'] == year]

    # Plot comparison of Pink Cab and Yellow Cab prices for each year
    sns.barplot(x='Price_Charged', y='City', hue='Company', data=year_data, ax=axes[i, 0], palette=colors,edgecolor='black')
    axes[i, 0].set_xlabel('Price Charged')
    axes[i, 0].set_ylabel('City')
    axes[i, 0].set_title(f'Year {year}')

    # Plot average price charged by Pink Cab in each city (descending order)
    pink_cab_prices = year_data[year_data['Company'] == 'Pink Cab'].groupby('City')['Price_Charged'].mean().sort_values(ascending=False)
    sns.barplot(x=pink_cab_prices.values, y=pink_cab_prices.index, ax=axes[i, 1], palette='RdPu')
    axes[i, 1].set_xlabel('Average Price Charged')
    axes[i, 1].set_ylabel('')
    axes[i, 1].set_title(f'Pink Cab ({year})')

    # Plot average price charged by Yellow Cab in each city (descending order)
    yellow_cab_prices = year_data[year_data['Company'] == 'Yellow Cab'].groupby('City')['Price_Charged'].mean().sort_values(ascending=False)
    sns.barplot(x=yellow_cab_prices.values, y=yellow_cab_prices.index, ax=axes[i, 2], palette='Wistia')
    axes[i, 2].set_xlabel('Average Price Charged')
    axes[i, 2].set_ylabel('')
    axes[i, 2].set_title(f'Yellow Cab ({year})')

plt.tight_layout()
plt.show()

"""* **Max and Min Trip charges**`

  we find that for **Pink Cab**, the minimum cost of a trip charged is ``$19.0``, while the maximum cost reaches ``$576.0``.
  
  On the other hand, for **Yellow Cab** the minimum trip cost is ``$22.8``, with the highest cost peaking at ``$691.2``.
"""

print('Pink Cab')
print('Minimum cost of the trip charged $',PinkCab_df['Cost_of_Trip'].min())
print('Maximum cost of the trip charged $',PinkCab_df['Cost_of_Trip'].max())
print('\nYellow Cab')
print('Minimum cost of the trip charged $',YellowCab_df['Cost_of_Trip'].min())
print('Maximum cost of the trip charged $',YellowCab_df['Cost_of_Trip'].max())

"""# **Profit Analysis**

**Profit margins**

**Profit margins** between Pink Cab and Yellow Cab over a three year period shows that **Yellow Cab** has **more** Profit than **Pink Cab**
"""

plt.figure(figsize=(8,6))
palettes =['hotpink','gold']
sns.lineplot(x='Year', y='Profit_Percentage', hue="Company", data=data, marker='o',palette=palettes)
plt.xlabel("Year")
plt.ylabel("Profit %")
plt.xticks( [2016, 2017, 2018], ['2016', '2017', '2018'])
plt.title("Profit % per year")

#profit for each company for each year
company_profit = data.groupby(['Company', 'Year'])['Profit'].sum().reset_index()
company_profit

total_profit_yearly = company_profit.groupby('Year')['Profit'].sum()

company_profit['Profit_Percentage'] = company_profit.apply(lambda row: (row['Profit'] / total_profit_yearly[row['Year']]) * 100, axis=1)
company_profit

years = np.sort(data['Year'].unique())
fig, axes = plt.subplots(1, 3, figsize=(15, 5), sharey=True)
colors=['hotpink','gold']
for i, year in enumerate(years):
    profit_data_year = company_profit[company_profit['Year'] == year]
    ax = axes[i]
    ax.pie(profit_data_year['Profit_Percentage'], labels=profit_data_year['Company'],explode=[0.05]*2, autopct='%1.1f%%', colors=colors, wedgeprops={'edgecolor': 'black'})
    ax.set_title(f'Profit Percentage for {year}')
plt.tight_layout()
plt.show()

company_std_dev = data.groupby('Company')['Profit'].std()
company_mean = data.groupby('Company')['Profit'].mean()
company_cv = company_std_dev / company_mean
most_stable_companies = company_cv.sort_values(ascending=True)
print("Coefficient of Variation (CV) for each company:")
print(most_stable_companies)

"""# **Cab User Analysis**

"""

Cab_Users=data.groupby(['Company','Gender','Age','Payment_Mode','City'])['Price_Charged'].mean().reset_index()
Cab_Users.head(10)

"""* **Number of Male and Female Users in Each Company:**

  The bar plot shows the count of male and female users for each cab company (Pink Cab and Yellow Cab).

  It appears that there are **more male users** than female users for both cab companies.
"""

gender_counts = data.groupby(['Company', 'Gender']).size().reset_index(name='Count')
colors_gender=['lightpink','skyblue']
plt.figure(figsize=(10, 6))
sns.barplot(x='Company', y='Count', hue='Gender', data=gender_counts, palette=colors,edgecolor='black')
plt.title('Number of Male and Female Users in Each Company')
plt.xlabel('Company')
plt.ylabel('Count')
plt.show()

"""* **Distribution of Female and Male Users Across Cities for Pink Cab and Yellow Cab:**

  The first subplot displays the distribution of female and male users for Pink Cab across different cities.

  The second subplot illustrates the distribution of female and male users for Yellow Cab across different cities.

  The gender distribution varies across cities, with some cities having more female users while others have more male users.
"""

fig, axes = plt.subplots(1, 2, figsize=(17, 8))
colors_gender = ['lightpink', 'skyblue']
fig.suptitle('Distribution of Female and Male Users in both companies', fontsize=15)

# Pink Cab
pink_cab_gender_city_counts = PinkCab_df.groupby(['City', 'Gender']).size().reset_index(name='Count')
sns.barplot(x='City', y='Count', hue='Gender', data=pink_cab_gender_city_counts, palette=colors_gender, ax=axes[0],edgecolor='black')
axes[0].set_title('Distribution of Female and Male Users for Pink Cab Across Cities')
axes[0].set_xlabel('City')
axes[0].set_ylabel('Count')
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=45)
axes[0].legend(title='Gender')

# Yellow Cab
yellow_cab_gender_city_counts = YellowCab_df.groupby(['City', 'Gender']).size().reset_index(name='Count')
sns.barplot(x='City', y='Count', hue='Gender', data=yellow_cab_gender_city_counts, palette=colors_gender, ax=axes[1],edgecolor='black')
axes[1].set_title('Distribution of Female and Male Users for Yellow Cab Across Cities')
axes[1].set_xlabel('City')
axes[1].set_ylabel('Count')
axes[1].set_xticklabels(axes[1].get_xticklabels(), rotation=45)
axes[1].legend(title='Gender')

plt.tight_layout()
plt.show()

"""* **Price Charged for Female and Male Users in both companies:**

  The first subplot shows the average price charged to female and male users for **Pink Cab** across different cities.

  The second subplot shows the average price charged to female and male users for **Yellow Cab** across different cities.

  The bars represent the average price charged to users of each gender in each city.

  Interestingly, there are **variations** in the average price charged to female and male users across different cities for both cab companies.
"""

fig, axes = plt.subplots(1, 2, figsize=(17, 8))
colors_gender = ['lightpink', 'skyblue']
fig.suptitle('Price Charged for Female and Male Users in both companies', fontsize=15)

# Pink Cab
pink_cab_gender_city_counts = PinkCab_df.groupby(['City', 'Gender'])['Price_Charged'].mean().reset_index()
sns.barplot(x='City', y='Price_Charged', hue='Gender', data=pink_cab_gender_city_counts, palette=colors_gender, ax=axes[0],edgecolor='black')
axes[0].set_title('Distribution of Female and Male Users for Pink Cab Across Cities')
axes[0].set_xlabel('City')
axes[0].set_ylabel('Count')
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=45)
axes[0].legend(title='Gender')

# Yellow Cab
yellow_cab_gender_city_counts = YellowCab_df.groupby(['City', 'Gender'])['Price_Charged'].mean().reset_index()
sns.barplot(x='City', y='Price_Charged', hue='Gender', data=yellow_cab_gender_city_counts, palette=colors_gender, ax=axes[1],edgecolor='black')
axes[1].set_title('Distribution of Female and Male Users for Yellow Cab Across Cities')
axes[1].set_xlabel('City')
axes[1].set_ylabel('Count')
axes[1].set_xticklabels(axes[1].get_xticklabels(), rotation=45)
axes[1].legend(title='Gender')

plt.tight_layout()
plt.show()

"""**Total Customers by Age Range**

The chart shows that the largest customer segment falls in the 20-29 age range (32.2%), followed by the 30-39 age range (31.6%). The proportion of customers reduces as age range increases.
"""

dataset=data.copy()

bins = [18, 19, 29, 39, 49, 59, 69]
labels = ['18-19', '20-29', '30-39', '40-49', '50-59', '60+']
dataset['Age_range'] = pd.cut(dataset.Age, bins, labels = labels,include_lowest = True)
age_range_share = dataset.groupby('Age_range').Customer_ID.nunique()
age_range_share

pie, ax = plt.subplots(figsize=[10,6])
colors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'lightpink', 'yellow']
labels = age_range_share.keys()
plt.pie(x=age_range_share, autopct="%.1f%%", explode=[0.05]*6, labels=labels, pctdistance=0.5,colors=colors,wedgeprops={'edgecolor': 'black'})
plt.title("Total Customers by Age Range", fontsize=14)

data.head()

"""# **Hypothesis Testing**

**Hypothesis 1: Company with Maximum Cab Users**
"""

pink_cab_data_Price = data[data['Company'] == 'Pink Cab']['Price_Charged']
yellow_cab_data_Price = data[data['Company'] == 'Yellow Cab']['Price_Charged']

#  t-test
t_statistic, p_value = ttest_ind(pink_cab_data_Price, yellow_cab_data_Price)

if p_value < 0.05:
    print("Reject the null hypothesis: There is a significant difference in the average price charged between Pink Cab and Yellow Cab.")
else:
    print("Fail to reject the null hypothesis: There is no significant difference in the average price charged between Pink Cab and Yellow Cab.")

"""**Hypothesis 2: Effect of Holidays on Cab Usage**"""

holiday_data = data[data['Holiday'] == 'Holiday']['Users']
non_holiday_data = data[data['Holiday'] == 'Non-Holiday']['Users']

# t-test
t_statistic, p_value = ttest_ind(holiday_data, non_holiday_data)
if p_value < 0.05:
    print("Reject the null hypothesis: There is a significant difference in cab usage between holidays and non-holidays.")
else:
    print("Fail to reject the null hypothesis: There is no significant difference in cab usage between holidays and non-holidays.")

"""**Hypothesis 3: Seasonality in Cab Usage**"""

# We are going to assume seasons as Spring in Months (3,4,5), Summer (6,7,8), Autumn (9,10,11),  Winter (12,1,2)
spring_data = data[data['Month'].isin([3, 4, 5])]['Users']
summer_data = data[data['Month'].isin([6, 7, 8])]['Users']
fall_data = data[data['Month'].isin([9, 10, 11])]['Users']
winter_data = data[data['Month'].isin([12, 1, 2])]['Users']

#  ANOVA test
f_statistic, p_value = f_oneway(spring_data, summer_data, fall_data, winter_data)
if p_value < 0.05:
    print("Reject the null hypothesis: There is a significant difference in cab usage across different seasons.")
else:
    print("Fail to reject the null hypothesis: There is no significant difference in cab usage across different seasons.")

"""**Hypothesis 4: Impact of Payment Mode on Cab Usage**"""

contingency_table = pd.crosstab(data['Payment_Mode'], data['Users'])

# chi-square test
chi2_statistic, p_value, dof, expected = chi2_contingency(contingency_table)
if p_value < 0.05:
    print("Reject the null hypothesis: There is a significant association between payment mode and cab usage.")
else:
    print("Fail to reject the null hypothesis: There is no significant association between payment mode and cab usage.")

"""**Hypothesis 5: Impact of City Population on Cab Usage**"""

# Fit linear regression model
X = sm.add_constant(data['Population'])
y = data['Users']
model = sm.OLS(y, X).fit()

if model.pvalues['Population'] < 0.05:
    print("Reject the null hypothesis: There is a significant impact of city population on cab usage.")
else:
    print("Fail to reject the null hypothesis: There is no significant impact of city population on cab usage.")

"""**Hypothesis 6: Impact of Distance Travelled on Profit**"""

#Correlation
correlation, p_value = pearsonr(data['KM_Travelled'], data['Profit'])

print("Correlation coefficient:", correlation)
print("P-value:", p_value)

if p_value < 0.05:
    print("Reject the null hypothesis: there is a significant impact of KM_Travelled and Profit are related.")
else:
    print("Fail to reject the null hypothesis: there is no significant impact ofKM_Travelled and Profit are related.")